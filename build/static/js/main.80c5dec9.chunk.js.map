{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/AddTransaction.jsx","components/Balance.jsx","components/Header.jsx","components/IncomeExpenses.jsx","components/Transaction.jsx","components/TransactionList.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppReducer","state","action","type","transactions","filter","transaction","id","payload","initialState","text","amount","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","Provider","value","deleteTransaction","addTransaction","AddTransaction","useState","setText","setAmount","useContext","onSubmit","e","preventDefault","newTransaction","Math","floor","random","className","htmlFor","onChange","target","placeholder","Balance","amounts","map","console","log","total","reduce","acc","item","toFixed","Header","IncomeExpenses","income","expense","Transaction","sign","class_name","abs","onClick","TransactionList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80c5dec9.chunk.js","sourcesContent":["const AppReducer =  (state, action) => {\n    switch(action.type){\n        case 'DELETE_TRANSACTION':\n            return{\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\n            }\n        case 'ADD_TRANSACTION':\n            return {\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n\n            }\n        default:\n            return state;\n    }\n}\n\nexport default AppReducer;","import React, {createContext, useReducer} from \"react\";\nimport AppReducer from './AppReducer'\n\n//iniitial state\n\nconst initialState = {\n    transactions: [\n        \n        { id: 1, text: 'Flower', amount: -20 },\n        { id: 2, text: 'Salary', amount: 300 },\n        { id: 3, text: 'Book', amount: -10 },\n        { id: 4, text: 'Camera', amount: 150 }\n        \n    ]\n}\n\n\n//create gloabl context\n\nexport const GlobalContext = createContext(initialState);\n\n//Provider component\nexport const GlobalProvider = ( {children} ) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    //actions\n    function deleteTransaction(id){\n        dispatch({\n            type: 'DELETE_TRANSACTION',\n            payload: id\n        });\n        //console.log('delete clikced')\n    }  \n\n    function addTransaction(transaction){\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload: transaction\n        });\n    }\n\n    return  (\n        <GlobalContext.Provider value={{\n            transactions: state.transactions,\n            deleteTransaction,\n            addTransaction\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}","import React, { useState, useContext} from 'react'\nimport { Fragment } from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\n\n\nfunction AddTransaction() {\n    const [text, setText] = useState('');\n    const [amount, setAmount] = useState(0);\n\n    const { addTransaction } = useContext(GlobalContext);\n\n    const Submit = e => {\n        e.preventDefault();\n\n        const newTransaction = {\n            id: Math.floor(Math.random() * 1000000000),\n            text,\n            amount: +amount\n        }\n\n        addTransaction(newTransaction);\n\n        \n\n    }\n\n    return (\n        <Fragment>\n            <h3>Add new transaction</h3>\n            <form onSubmit={Submit}>\n                <div className=\"form-control\">\n                <label htmlFor=\"text\">Text</label>\n                <input \n                    type=\"text\" \n                    value={text}\n                    onChange={(e) => setText(e.target.value)}\n                    placeholder=\"Enter text...\" \n                />\n                </div>\n                <div className=\"form-control\">\n                <label htmlFor=\"amount\">\n                    Amount <br />\n                    (negative - expense, positive - income)\n                </label>\n                <input \n                    type=\"number\" \n                    value={amount}\n                    placeholder=\"Enter amount...\" \n                    onChange = {(e) => setAmount(e.target.value)}\n                />\n                </div>\n                <button className=\"btn\">Add transaction</button>\n            </form>\n            \n        </Fragment>\n    )\n}\n\nexport default AddTransaction\n","import React from 'react'\nimport { Fragment } from 'react';\nimport { useContext } from 'react/cjs/react.development';\n\nimport { GlobalContext } from '../context/GlobalState';\n\nfunction Balance() {\n    const { transactions } = useContext(GlobalContext);\n    const amounts = transactions.map(transaction => transaction.amount);\n    console.log(amounts)\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\n    \n\n    return (\n        <Fragment>\n            <h4>Your Balance</h4>\n            <h1>GH{total}</h1>\n        </Fragment>\n    )\n}\n\nexport default Balance\n","import React from 'react'\n\nfunction Header() {\n    return (\n        <div>\n            <h2>Expense Tracker</h2>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Fragment, useContext } from 'react'\n\nimport { GlobalContext } from '../context/GlobalState'\n\nfunction IncomeExpenses() {\n    const { transactions } = useContext(GlobalContext);\n    const amounts = transactions.map(transaction => transaction.amount);\n    const income = amounts\n        .filter(item => item> 0)\n        .reduce((acc, item)=> (acc += item), 0)\n        .toFixed(2);\n    const expense = amounts\n        .filter(item => item < 0)\n        .reduce((acc, item)=> (acc += item * -1), 0) \n        .toFixed(2);\n        \n    \n   \n    \n\n    return (\n        <Fragment>\n            <div className=\"inc-exp-container\">\n                <div>\n                    <h4>Income</h4>\n                    <p  className=\"money plus\">GHC {income}</p>\n                </div>\n                <div>\n                    <h4>Expense</h4>\n                    <p className=\"money minus\">GHC {expense}</p>\n                </div>\n            </div>\n            \n        </Fragment>\n    )\n}\n\nexport default IncomeExpenses\n","import React from 'react'\nimport { Fragment, useContext } from 'react'\nimport { GlobalContext } from '../context/GlobalState';\n\nfunction Transaction({ transaction }) {\n\n    const { deleteTransaction } = useContext( GlobalContext);\n\n    const sign = transaction.amount < 0 ? '-' : '+';\n    const class_name = sign === '-' ? 'minus' : 'plus'\n\n    return (\n        <Fragment>\n            <li className={`${class_name}`}>\n                    {transaction.text} \n                    <span> {sign} GHC {Math.abs(transaction.amount)}</span>\n                    <button \n                        className=\"delete-btn\"\n                        onClick={()=> deleteTransaction(transaction.id)}\n                    >\n                        x\n                    </button>\n            </li>\n        </Fragment>\n    )\n}\n\nexport default Transaction\n","import React from 'react'\nimport { Fragment, useContext } from 'react'\nimport Transaction from './Transaction';\n\nimport { GlobalContext } from '../context/GlobalState'\n\nfunction TransactionList() {\n    const { transactions } = useContext(GlobalContext);\n    //console.log(context)\n\n    return (\n        <Fragment>\n            <h3>History</h3>\n            <ul className=\"list\">\n                { transactions.map(transaction => (\n                    <Transaction key={transaction.id} transaction={transaction} />\n                ))}\n                \n            </ul>\n            \n        </Fragment>\n    )\n}\n\nexport default TransactionList\n","import AddTransaction from './components/AddTransaction';\nimport Balance from './components/Balance';\nimport Header from './components/Header';\nimport IncomeExpenses from './components/IncomeExpenses';\nimport TransactionList from './components/TransactionList';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses  />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n      \n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}